{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-9491b609e49cdcaf1b7f560e254f3dec",
            "file": "src/app/store/app.state.ts",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector } from '@ngrx/store';\nimport { Products } from '../shared/models/products';\nimport * as product from './products/prodcuts.reducer';\nimport * as access from './user-access/auth.reducers';\n\nexport interface AppState {\n    authState: access.State;\n    product: Products[];\n}\n\nexport const reducers = {\n    auth: access.reducer,\n    product: product.reducer\n};\n\nexport const productState = createFeatureSelector<AppState>('product');\nexport const accesState = createFeatureSelector<AppState>('access');\n",
            "properties": [
                {
                    "name": "authState",
                    "type": "access.State",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "product",
                    "type": "Products[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Products",
            "id": "interface-Products-ec51c6d44465ab7dcd4ae31219da7fe5",
            "file": "src/app/shared/models/products.ts",
            "type": "interface",
            "sourceCode": "export interface Products {\r\n    description: string;\r\n    productName: string;\r\n    id?: number;\r\n    category: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "productName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProductsState",
            "id": "interface-ProductsState-6c8c937c70d20cf54dd95f393451a8d8",
            "file": "src/app/store/products/product.state.ts",
            "type": "interface",
            "sourceCode": "import { Products } from 'src/app/shared/models/products';\n\nexport interface ProductsState {\n    readonly quotes: Products[];\n}\n",
            "properties": [
                {
                    "name": "quotes",
                    "type": "Products[]",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-8d95876e64aab51bc8ef182cb17184a1",
            "file": "src/app/store/user-access/auth.reducers.ts",
            "type": "interface",
            "sourceCode": "import { User } from 'src/app/shared/models/User';\nimport { AuthAction, AuthActionTypes } from './user.actions';\n\nexport interface State {\n  user: User | null;\n}\n\nexport const initialState: State = {\n  user: null,\n};\nexport function reducer(state = initialState, action: AuthAction): State {\n  switch (action.type) {\n    case AuthActionTypes.SIGNUP_SUCCESS: {\n      return {\n        ...state,\n        user: action.payload,\n      };\n    }\n    case AuthActionTypes.SIGNUP_FAILURE: {\n      return {\n        ...state,\n      };\n    }\n    case AuthActionTypes.LOGIN_FAIL: {\n      return {\n        ...state,\n      };\n    }\n    case AuthActionTypes.LOGOUT: {\n      return initialState;\n    }\n    case AuthActionTypes.LOGIN_SUCCESS: {\n      return {\n        ...state,\n        user: {\n          name: action.payload.name,\n          username: action.payload.username,\n          password: action.payload.password\n        },\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-42e23f934dc6123c112c5433903b71bb-1",
            "file": "src/app/store/products/prodcuts.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Products } from 'src/app/shared/models/products';\nimport {\n  ProductActionNames, GET_PRODUCTS,\n  DATA_LOAD, ADD_PRODUCTS, ADD_PRODUCTS_SUCCESS, DELETE_PRODUCT, DELETE_PRODUCTS_SUCCESS,\n  EDIT_PRODUCTS, EDIT_PRODUCTS_SUCCESS\n} from './products.actions';\n\nexport interface State {\n  products: Products[];\n}\nexport const initialStateValue: State = {\n  products: [],\n};\n\nexport function reducer(state: State = initialStateValue, action: ProductActionNames): State {\n  switch (action.type) {\n    case GET_PRODUCTS: {\n      return {\n        ...state,\n      };\n    }\n    case DATA_LOAD: {\n      return {\n        products: action.payload,\n      };\n    }\n    case ADD_PRODUCTS: {\n      return {\n        ...state\n      };\n    }\n    case ADD_PRODUCTS_SUCCESS: {\n      return {\n        products: [...state.products, action.payload],\n      };\n    }\n\n    case DELETE_PRODUCT: {\n      return {\n        ...state\n      };\n    }\n    case DELETE_PRODUCTS_SUCCESS: {\n      return {\n        ...state,\n      };\n    }\n    case EDIT_PRODUCTS: {\n      return {\n        ...state,\n      };\n    }\n    case EDIT_PRODUCTS_SUCCESS: {\n      return {\n        ...state,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "products",
                    "type": "Products[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "User",
            "id": "interface-User-8ec5ca5afafecf9354b1df27a66400da",
            "file": "src/app/shared/models/user.ts",
            "type": "interface",
            "sourceCode": "export interface User {\n    id?: number;\n    name?: string;\n    username: string;\n    password: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AccessEffects",
            "id": "injectable-AccessEffects-80997a43cf64b9dc23600c3ea993871f",
            "file": "src/app/store/user-access/auth.effects.ts",
            "properties": [
                {
                    "name": "LogIn",
                    "defaultValue": "this.actions.pipe(\n    ofType(AuthActionTypes.LOGIN),\n    map((action: LogIn) => action.payload),\n    switchMap((payload) => {\n      return this.userAccessService.login(payload).pipe(\n        map((user) => {\n          if (user.length > 0) {\n            let name = null;\n            const idx = user.findIndex(el => el.username === payload.username);\n            if (idx !== -1) {\n              name = user[idx].name;\n              return new LogInSuccess({ username: name });\n            }\n          } else {\n            if (localStorage.getItem('isUserLoggedIn') === 'true') {\n              localStorage.removeItem('isUserLoggedIn');\n            }\n            return new LogInFail('Login Fail');\n          }\n        })\n      );\n    })\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "LogInFail",
                    "defaultValue": "this.actions.pipe(\n    ofType(AuthActionTypes.LOGIN_FAIL),\n    tap((user) => {\n      return;\n    })\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogInSuccess",
                    "defaultValue": "this.actions.pipe(\n    ofType(AuthActionTypes.LOGIN_SUCCESS),\n    tap((user) => {\n      localStorage.setItem('user', JSON.stringify(user.payload));\n      localStorage.setItem('isUserLoggedIn', 'true');\n      this.router.navigateByUrl('/');\n    })\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "Logout",
                    "defaultValue": "this.actions.pipe(\n    ofType(AuthActionTypes.LOGOUT),\n    tap((user) => {\n      if (localStorage.getItem('isUserLoggedIn') === 'true') {\n        localStorage.removeItem('isUserLoggedIn');\n      }\n      localStorage.removeItem('user');\n    })\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUp",
                    "defaultValue": "this.actions.pipe(\n    ofType(AuthActionTypes.SIGNUP),\n    map((action: SignUp) => action.payload),\n    switchMap((payload) => {\n      return this.userAccessService.signUp(payload).pipe(\n        map((data) => {\n          return new SignUpSuccess(data);\n        })\n      );\n    })\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "SignUpFailure",
                    "defaultValue": "this.actions.pipe(\n    ofType(AuthActionTypes.SIGNUP_FAILURE),\n    tap((user) => { })\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUpSuccess",
                    "defaultValue": "this.actions.pipe(\n    ofType(AuthActionTypes.SIGNUP_SUCCESS),\n    tap((user) => {\n      this.router.navigateByUrl('login');\n    })\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { UserAccessService } from 'src/app/services/user-access.service';\nimport {\n  AuthActionTypes,\n  LogIn,\n  LogInFail,\n  LogInSuccess,\n  SignUp,\n  SignUpSuccess,\n} from './user.actions';\n\n@Injectable()\nexport class AccessEffects {\n  constructor(\n    private actions: Actions,\n    private userAccessService: UserAccessService,\n    private router: Router\n  ) { }\n\n  @Effect({ dispatch: false })\n  LogInSuccess: Observable<any> = this.actions.pipe(\n    ofType(AuthActionTypes.LOGIN_SUCCESS),\n    tap((user) => {\n      localStorage.setItem('user', JSON.stringify(user.payload));\n      localStorage.setItem('isUserLoggedIn', 'true');\n      this.router.navigateByUrl('/');\n    })\n  );\n  \n  @Effect({ dispatch: false })\n  LogInFail: Observable<any> = this.actions.pipe(\n    ofType(AuthActionTypes.LOGIN_FAIL),\n    tap((user) => {\n      return;\n    })\n  );\n\n  @Effect()\n  LogIn: Observable<any> = this.actions.pipe(\n    ofType(AuthActionTypes.LOGIN),\n    map((action: LogIn) => action.payload),\n    switchMap((payload) => {\n      return this.userAccessService.login(payload).pipe(\n        map((user) => {\n          if (user.length > 0) {\n            let name = null;\n            const idx = user.findIndex(el => el.username === payload.username);\n            if (idx !== -1) {\n              name = user[idx].name;\n              return new LogInSuccess({ username: name });\n            }\n          } else {\n            if (localStorage.getItem('isUserLoggedIn') === 'true') {\n              localStorage.removeItem('isUserLoggedIn');\n            }\n            return new LogInFail('Login Fail');\n          }\n        })\n      );\n    })\n  );\n\n  @Effect({ dispatch: false })\n  SignUpFailure: Observable<any> = this.actions.pipe(\n    ofType(AuthActionTypes.SIGNUP_FAILURE),\n    tap((user) => { })\n  );\n\n  @Effect()\n  SignUp: Observable<any> = this.actions.pipe(\n    ofType(AuthActionTypes.SIGNUP),\n    map((action: SignUp) => action.payload),\n    switchMap((payload) => {\n      return this.userAccessService.signUp(payload).pipe(\n        map((data) => {\n          return new SignUpSuccess(data);\n        })\n      );\n    })\n  );\n  @Effect({ dispatch: false })\n  SignUpSuccess: Observable<any> = this.actions.pipe(\n    ofType(AuthActionTypes.SIGNUP_SUCCESS),\n    tap((user) => {\n      this.router.navigateByUrl('login');\n    })\n  );\n\n  @Effect({ dispatch: false })\n  Logout: Observable<any> = this.actions.pipe(\n    ofType(AuthActionTypes.LOGOUT),\n    tap((user) => {\n      if (localStorage.getItem('isUserLoggedIn') === 'true') {\n        localStorage.removeItem('isUserLoggedIn');\n      }\n      localStorage.removeItem('user');\n    })\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "userAccessService",
                        "type": "UserAccessService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAccessService",
                        "type": "UserAccessService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductsEffects",
            "id": "injectable-ProductsEffects-441202d477e319757d688b4cf922004d",
            "file": "src/app/store/products/products.effects.ts",
            "properties": [
                {
                    "name": "AddProduct",
                    "defaultValue": "this.actions$.pipe(\n        ofType(ADD_PRODUCTS),\n        map((action: AddProduct) => action.payload),\n        mergeMap(payload => {\n            return this.productsService.addProducts(payload).pipe(\n                map((data) => new AddProductSuccess(data)));\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "deleteProduct$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n        ofType(DELETE_PRODUCT),\n        map((action: DeleteProduct) => action),\n        mergeMap((payload: any) => this.productsService.deleteProduct(payload.payload)\n            .pipe(\n                map(() => new DeleteProductSuccess()),\n                catchError(() => EMPTY)\n            ))\n    )\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "getProduct$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\n        ofType(GET_PRODUCTS),\n        map((action: GetProducts) => action),\n        mergeMap(() => this.productsService.getAllProducts()\n            .pipe(\n                map((products) => new LoadDataSuccess(products)),\n                catchError(() => EMPTY)\n            ))\n    )\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "UpdateProduct",
                    "defaultValue": "this.actions$.pipe(\n        ofType(EDIT_PRODUCTS),\n        map((action: EditProduct) => action.payload),\n        mergeMap(payload => {\n            return this.productsService.editProduct(payload)\n                .pipe(\n                    map((data) => {\n                        if (data) {\n                            return new EditProductSuccess(data);\n                        }\n                    }));\n        }))",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType, createEffect } from '@ngrx/effects';\nimport { Observable, EMPTY } from 'rxjs';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { ProductsService } from 'src/app/services/products.service';\nimport {\n    ADD_PRODUCTS, AddProduct, AddProductSuccess, GET_PRODUCTS,\n    GetProducts, DELETE_PRODUCT, DeleteProduct,\n    DeleteProductSuccess, EDIT_PRODUCTS, EditProduct, EditProductSuccess, LoadDataSuccess\n} from './products.actions';\n\n@Injectable()\nexport class ProductsEffects {\n    constructor(\n        private productsService: ProductsService,\n        private actions$: Actions) { }\n\n    getProduct$ = createEffect(() => this.actions$.pipe(\n        ofType(GET_PRODUCTS),\n        map((action: GetProducts) => action),\n        mergeMap(() => this.productsService.getAllProducts()\n            .pipe(\n                map((products) => new LoadDataSuccess(products)),\n                catchError(() => EMPTY)\n            ))\n    )\n    );\n\n    deleteProduct$ = createEffect(() => this.actions$.pipe(\n        ofType(DELETE_PRODUCT),\n        map((action: DeleteProduct) => action),\n        mergeMap((payload: any) => this.productsService.deleteProduct(payload.payload)\n            .pipe(\n                map(() => new DeleteProductSuccess()),\n                catchError(() => EMPTY)\n            ))\n    )\n    );\n\n    @Effect({ dispatch: true })\n    UpdateProduct: Observable<any> = this.actions$.pipe(\n        ofType(EDIT_PRODUCTS),\n        map((action: EditProduct) => action.payload),\n        mergeMap(payload => {\n            return this.productsService.editProduct(payload)\n                .pipe(\n                    map((data) => {\n                        if (data) {\n                            return new EditProductSuccess(data);\n                        }\n                    }));\n        }));\n\n\n    @Effect({ dispatch: true })\n    AddProduct: Observable<any> = this.actions$.pipe(\n        ofType(ADD_PRODUCTS),\n        map((action: AddProduct) => action.payload),\n        mergeMap(payload => {\n            return this.productsService.addProducts(payload).pipe(\n                map((data) => new AddProductSuccess(data)));\n        }));\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "productsService",
                        "type": "ProductsService"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductsService",
            "id": "injectable-ProductsService-db49f17b03ffa2f8880c7a2476d38edc",
            "file": "src/app/services/products.service.ts",
            "properties": [
                {
                    "name": "httpOptions",
                    "defaultValue": "{\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "addProducts",
                    "args": [
                        {
                            "name": "product",
                            "type": "Products"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Products>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Products",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Products>",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "Products"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Products>",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Products",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "errorCatcher",
                    "args": [
                        {
                            "name": "errorResponse",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "errorResponse",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Products[]>",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "getProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Products>",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Products } from '../shared/models/products';\nimport { HTTPPORT, PRODUCTS } from '../shared/shared-constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n\n  constructor(private http: HttpClient) { }\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  };\n\n  addProducts(product: Products): Observable<Products> {\n    const url = HTTPPORT + PRODUCTS;\n    return this.http\n      .post<Products>(url, product, this.httpOptions)\n      .pipe(catchError(this.errorCatcher));\n  }\n\n  errorCatcher(errorResponse: HttpErrorResponse): Observable<never> {\n    if (errorResponse.error instanceof ErrorEvent) {\n      console.error('An error occurred:', errorResponse.error.message);\n    }\n    else {\n      console.error(\n        'Backend returned code ${errorResponse.status}, ' +\n        'body was: ${errorResponse.error}');\n    }\n    window.alert('Error Occurred; please try again later.');\n    return throwError(\n      'Error Occurred; please try again later.');\n  }\n\n  getAllProducts(): Observable<Products[]> {\n    const url = HTTPPORT + PRODUCTS;\n    return this.http\n      .get<Products[]>(url)\n      .pipe(catchError(this.errorCatcher));\n  }\n\n  deleteProduct(id: number): Observable<Products> {\n    const url = HTTPPORT + encodeURI(`products/${id}`);\n    return this.http\n      .delete<Products>(url)\n      .pipe(catchError(this.errorCatcher));\n  }\n\n  getProduct(id: number): Observable<Products> {\n    const url = HTTPPORT + PRODUCTS +  '/' + id;\n    return this.http\n      .get<Products>(url)\n      .pipe(catchError(this.errorCatcher));\n  }\n\n  editProduct(product: Products): Observable<Products> {\n    const url = HTTPPORT + encodeURI(`products/${product.id}`);\n    return this.http\n      .patch<Products>(url, product, this.httpOptions)\n      .pipe(catchError(this.errorCatcher));\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserAccessService",
            "id": "injectable-UserAccessService-501523cbb5b73311fa80cbf77545e889",
            "file": "src/app/services/user-access.service.ts",
            "properties": [
                {
                    "name": "httpOptions",
                    "defaultValue": "{\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "errorCatcher",
                    "args": [
                        {
                            "name": "error",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User[]>",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { User } from '../shared/models/User';\nimport { catchError } from 'rxjs/operators';\nimport { HTTPPORT } from '../shared/shared-constants';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserAccessService {\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  };\n\n  constructor(private http: HttpClient) {}\n\n  login(user: User): Observable<User[]> {\n    const loginUrl = encodeURI(\n      'users?username=' + user.username + '&password=' + user.password\n    );\n    return this.http\n      .get<User[]>(HTTPPORT + loginUrl)\n      .pipe(catchError(this.errorCatcher));\n  }\n\n  signUp(user: User): Observable<User> {\n    const signUpUrl = encodeURI('users');\n    return this.http\n      .post<User>(HTTPPORT + signUpUrl, user, this.httpOptions)\n      .pipe(catchError(this.errorCatcher));\n  }\n\n  errorCatcher(error: any): Observable<never> {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddProduct",
            "id": "class-AddProduct-8f821070acc51cb49e845044c331b634",
            "file": "src/app/store/products/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Products } from 'src/app/shared/models/products';\n\n\nexport const GET_PRODUCTS = '[PRODUCTS] GET';\nexport const ADD_PRODUCTS = '[PRODUCTS] ADD';\nexport const ADD_PRODUCTS_SUCCESS = '[PRODUCTS] ADD PRODUCTS SUCCESS';\nexport const DELETE_PRODUCT = '[PRODUCTS] DELETE';\nexport const DELETE_PRODUCTS_SUCCESS = '[PRODUCTS] DELETE PRODUCTS SUCCESS';\nexport const EDIT_PRODUCTS = '[PRODUCTS] EDIT';\nexport const EDIT_PRODUCTS_SUCCESS = '[PRODUCTS] EDIT PRODUCTS SUCCESS';\nexport const DATA_LOAD = '[PRODUCTS] LOAD';\n\n\nexport class GetProducts implements Action {\n    readonly type = GET_PRODUCTS;\n    constructor() { }\n}\nexport class LoadDataSuccess implements Action {\n    readonly type = DATA_LOAD;\n    constructor(public payload: Products[]) { }\n}\nexport class AddProduct implements Action {\n    readonly type = ADD_PRODUCTS;\n    constructor(public payload: Products) {\n    }\n}\nexport class AddProductSuccess implements Action {\n    readonly type = ADD_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\nexport class DeleteProduct implements Action {\n    readonly type = DELETE_PRODUCT;\n    constructor(public payload: number) { }\n}\nexport class DeleteProductSuccess implements Action {\n    readonly type = DELETE_PRODUCTS_SUCCESS;\n}\nexport class EditProduct implements Action {\n    readonly type = EDIT_PRODUCTS;\n    constructor(public payload: Products) { }\n}\nexport class EditProductSuccess implements Action {\n    readonly type = EDIT_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\n\nexport type ProductActionNames =\n    AddProduct |\n    GetProducts |\n    DeleteProduct |\n    EditProduct |\n    LoadDataSuccess |\n    AddProductSuccess |\n    EditProductSuccess |\n    DeleteProductSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Products"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Products",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Products",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_PRODUCTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddProductSuccess",
            "id": "class-AddProductSuccess-8f821070acc51cb49e845044c331b634",
            "file": "src/app/store/products/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Products } from 'src/app/shared/models/products';\n\n\nexport const GET_PRODUCTS = '[PRODUCTS] GET';\nexport const ADD_PRODUCTS = '[PRODUCTS] ADD';\nexport const ADD_PRODUCTS_SUCCESS = '[PRODUCTS] ADD PRODUCTS SUCCESS';\nexport const DELETE_PRODUCT = '[PRODUCTS] DELETE';\nexport const DELETE_PRODUCTS_SUCCESS = '[PRODUCTS] DELETE PRODUCTS SUCCESS';\nexport const EDIT_PRODUCTS = '[PRODUCTS] EDIT';\nexport const EDIT_PRODUCTS_SUCCESS = '[PRODUCTS] EDIT PRODUCTS SUCCESS';\nexport const DATA_LOAD = '[PRODUCTS] LOAD';\n\n\nexport class GetProducts implements Action {\n    readonly type = GET_PRODUCTS;\n    constructor() { }\n}\nexport class LoadDataSuccess implements Action {\n    readonly type = DATA_LOAD;\n    constructor(public payload: Products[]) { }\n}\nexport class AddProduct implements Action {\n    readonly type = ADD_PRODUCTS;\n    constructor(public payload: Products) {\n    }\n}\nexport class AddProductSuccess implements Action {\n    readonly type = ADD_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\nexport class DeleteProduct implements Action {\n    readonly type = DELETE_PRODUCT;\n    constructor(public payload: number) { }\n}\nexport class DeleteProductSuccess implements Action {\n    readonly type = DELETE_PRODUCTS_SUCCESS;\n}\nexport class EditProduct implements Action {\n    readonly type = EDIT_PRODUCTS;\n    constructor(public payload: Products) { }\n}\nexport class EditProductSuccess implements Action {\n    readonly type = EDIT_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\n\nexport type ProductActionNames =\n    AddProduct |\n    GetProducts |\n    DeleteProduct |\n    EditProduct |\n    LoadDataSuccess |\n    AddProductSuccess |\n    EditProductSuccess |\n    DeleteProductSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Products"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Products",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Products",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_PRODUCTS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteProduct",
            "id": "class-DeleteProduct-8f821070acc51cb49e845044c331b634",
            "file": "src/app/store/products/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Products } from 'src/app/shared/models/products';\n\n\nexport const GET_PRODUCTS = '[PRODUCTS] GET';\nexport const ADD_PRODUCTS = '[PRODUCTS] ADD';\nexport const ADD_PRODUCTS_SUCCESS = '[PRODUCTS] ADD PRODUCTS SUCCESS';\nexport const DELETE_PRODUCT = '[PRODUCTS] DELETE';\nexport const DELETE_PRODUCTS_SUCCESS = '[PRODUCTS] DELETE PRODUCTS SUCCESS';\nexport const EDIT_PRODUCTS = '[PRODUCTS] EDIT';\nexport const EDIT_PRODUCTS_SUCCESS = '[PRODUCTS] EDIT PRODUCTS SUCCESS';\nexport const DATA_LOAD = '[PRODUCTS] LOAD';\n\n\nexport class GetProducts implements Action {\n    readonly type = GET_PRODUCTS;\n    constructor() { }\n}\nexport class LoadDataSuccess implements Action {\n    readonly type = DATA_LOAD;\n    constructor(public payload: Products[]) { }\n}\nexport class AddProduct implements Action {\n    readonly type = ADD_PRODUCTS;\n    constructor(public payload: Products) {\n    }\n}\nexport class AddProductSuccess implements Action {\n    readonly type = ADD_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\nexport class DeleteProduct implements Action {\n    readonly type = DELETE_PRODUCT;\n    constructor(public payload: number) { }\n}\nexport class DeleteProductSuccess implements Action {\n    readonly type = DELETE_PRODUCTS_SUCCESS;\n}\nexport class EditProduct implements Action {\n    readonly type = EDIT_PRODUCTS;\n    constructor(public payload: Products) { }\n}\nexport class EditProductSuccess implements Action {\n    readonly type = EDIT_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\n\nexport type ProductActionNames =\n    AddProduct |\n    GetProducts |\n    DeleteProduct |\n    EditProduct |\n    LoadDataSuccess |\n    AddProductSuccess |\n    EditProductSuccess |\n    DeleteProductSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DELETE_PRODUCT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteProductSuccess",
            "id": "class-DeleteProductSuccess-8f821070acc51cb49e845044c331b634",
            "file": "src/app/store/products/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Products } from 'src/app/shared/models/products';\n\n\nexport const GET_PRODUCTS = '[PRODUCTS] GET';\nexport const ADD_PRODUCTS = '[PRODUCTS] ADD';\nexport const ADD_PRODUCTS_SUCCESS = '[PRODUCTS] ADD PRODUCTS SUCCESS';\nexport const DELETE_PRODUCT = '[PRODUCTS] DELETE';\nexport const DELETE_PRODUCTS_SUCCESS = '[PRODUCTS] DELETE PRODUCTS SUCCESS';\nexport const EDIT_PRODUCTS = '[PRODUCTS] EDIT';\nexport const EDIT_PRODUCTS_SUCCESS = '[PRODUCTS] EDIT PRODUCTS SUCCESS';\nexport const DATA_LOAD = '[PRODUCTS] LOAD';\n\n\nexport class GetProducts implements Action {\n    readonly type = GET_PRODUCTS;\n    constructor() { }\n}\nexport class LoadDataSuccess implements Action {\n    readonly type = DATA_LOAD;\n    constructor(public payload: Products[]) { }\n}\nexport class AddProduct implements Action {\n    readonly type = ADD_PRODUCTS;\n    constructor(public payload: Products) {\n    }\n}\nexport class AddProductSuccess implements Action {\n    readonly type = ADD_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\nexport class DeleteProduct implements Action {\n    readonly type = DELETE_PRODUCT;\n    constructor(public payload: number) { }\n}\nexport class DeleteProductSuccess implements Action {\n    readonly type = DELETE_PRODUCTS_SUCCESS;\n}\nexport class EditProduct implements Action {\n    readonly type = EDIT_PRODUCTS;\n    constructor(public payload: Products) { }\n}\nexport class EditProductSuccess implements Action {\n    readonly type = EDIT_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\n\nexport type ProductActionNames =\n    AddProduct |\n    GetProducts |\n    DeleteProduct |\n    EditProduct |\n    LoadDataSuccess |\n    AddProductSuccess |\n    EditProductSuccess |\n    DeleteProductSuccess;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "DELETE_PRODUCTS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "EditProduct",
            "id": "class-EditProduct-8f821070acc51cb49e845044c331b634",
            "file": "src/app/store/products/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Products } from 'src/app/shared/models/products';\n\n\nexport const GET_PRODUCTS = '[PRODUCTS] GET';\nexport const ADD_PRODUCTS = '[PRODUCTS] ADD';\nexport const ADD_PRODUCTS_SUCCESS = '[PRODUCTS] ADD PRODUCTS SUCCESS';\nexport const DELETE_PRODUCT = '[PRODUCTS] DELETE';\nexport const DELETE_PRODUCTS_SUCCESS = '[PRODUCTS] DELETE PRODUCTS SUCCESS';\nexport const EDIT_PRODUCTS = '[PRODUCTS] EDIT';\nexport const EDIT_PRODUCTS_SUCCESS = '[PRODUCTS] EDIT PRODUCTS SUCCESS';\nexport const DATA_LOAD = '[PRODUCTS] LOAD';\n\n\nexport class GetProducts implements Action {\n    readonly type = GET_PRODUCTS;\n    constructor() { }\n}\nexport class LoadDataSuccess implements Action {\n    readonly type = DATA_LOAD;\n    constructor(public payload: Products[]) { }\n}\nexport class AddProduct implements Action {\n    readonly type = ADD_PRODUCTS;\n    constructor(public payload: Products) {\n    }\n}\nexport class AddProductSuccess implements Action {\n    readonly type = ADD_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\nexport class DeleteProduct implements Action {\n    readonly type = DELETE_PRODUCT;\n    constructor(public payload: number) { }\n}\nexport class DeleteProductSuccess implements Action {\n    readonly type = DELETE_PRODUCTS_SUCCESS;\n}\nexport class EditProduct implements Action {\n    readonly type = EDIT_PRODUCTS;\n    constructor(public payload: Products) { }\n}\nexport class EditProductSuccess implements Action {\n    readonly type = EDIT_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\n\nexport type ProductActionNames =\n    AddProduct |\n    GetProducts |\n    DeleteProduct |\n    EditProduct |\n    LoadDataSuccess |\n    AddProductSuccess |\n    EditProductSuccess |\n    DeleteProductSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Products"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Products",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Products",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "EDIT_PRODUCTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "EditProductSuccess",
            "id": "class-EditProductSuccess-8f821070acc51cb49e845044c331b634",
            "file": "src/app/store/products/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Products } from 'src/app/shared/models/products';\n\n\nexport const GET_PRODUCTS = '[PRODUCTS] GET';\nexport const ADD_PRODUCTS = '[PRODUCTS] ADD';\nexport const ADD_PRODUCTS_SUCCESS = '[PRODUCTS] ADD PRODUCTS SUCCESS';\nexport const DELETE_PRODUCT = '[PRODUCTS] DELETE';\nexport const DELETE_PRODUCTS_SUCCESS = '[PRODUCTS] DELETE PRODUCTS SUCCESS';\nexport const EDIT_PRODUCTS = '[PRODUCTS] EDIT';\nexport const EDIT_PRODUCTS_SUCCESS = '[PRODUCTS] EDIT PRODUCTS SUCCESS';\nexport const DATA_LOAD = '[PRODUCTS] LOAD';\n\n\nexport class GetProducts implements Action {\n    readonly type = GET_PRODUCTS;\n    constructor() { }\n}\nexport class LoadDataSuccess implements Action {\n    readonly type = DATA_LOAD;\n    constructor(public payload: Products[]) { }\n}\nexport class AddProduct implements Action {\n    readonly type = ADD_PRODUCTS;\n    constructor(public payload: Products) {\n    }\n}\nexport class AddProductSuccess implements Action {\n    readonly type = ADD_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\nexport class DeleteProduct implements Action {\n    readonly type = DELETE_PRODUCT;\n    constructor(public payload: number) { }\n}\nexport class DeleteProductSuccess implements Action {\n    readonly type = DELETE_PRODUCTS_SUCCESS;\n}\nexport class EditProduct implements Action {\n    readonly type = EDIT_PRODUCTS;\n    constructor(public payload: Products) { }\n}\nexport class EditProductSuccess implements Action {\n    readonly type = EDIT_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\n\nexport type ProductActionNames =\n    AddProduct |\n    GetProducts |\n    DeleteProduct |\n    EditProduct |\n    LoadDataSuccess |\n    AddProductSuccess |\n    EditProductSuccess |\n    DeleteProductSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Products"
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Products",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Products",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "EDIT_PRODUCTS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GetProducts",
            "id": "class-GetProducts-8f821070acc51cb49e845044c331b634",
            "file": "src/app/store/products/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Products } from 'src/app/shared/models/products';\n\n\nexport const GET_PRODUCTS = '[PRODUCTS] GET';\nexport const ADD_PRODUCTS = '[PRODUCTS] ADD';\nexport const ADD_PRODUCTS_SUCCESS = '[PRODUCTS] ADD PRODUCTS SUCCESS';\nexport const DELETE_PRODUCT = '[PRODUCTS] DELETE';\nexport const DELETE_PRODUCTS_SUCCESS = '[PRODUCTS] DELETE PRODUCTS SUCCESS';\nexport const EDIT_PRODUCTS = '[PRODUCTS] EDIT';\nexport const EDIT_PRODUCTS_SUCCESS = '[PRODUCTS] EDIT PRODUCTS SUCCESS';\nexport const DATA_LOAD = '[PRODUCTS] LOAD';\n\n\nexport class GetProducts implements Action {\n    readonly type = GET_PRODUCTS;\n    constructor() { }\n}\nexport class LoadDataSuccess implements Action {\n    readonly type = DATA_LOAD;\n    constructor(public payload: Products[]) { }\n}\nexport class AddProduct implements Action {\n    readonly type = ADD_PRODUCTS;\n    constructor(public payload: Products) {\n    }\n}\nexport class AddProductSuccess implements Action {\n    readonly type = ADD_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\nexport class DeleteProduct implements Action {\n    readonly type = DELETE_PRODUCT;\n    constructor(public payload: number) { }\n}\nexport class DeleteProductSuccess implements Action {\n    readonly type = DELETE_PRODUCTS_SUCCESS;\n}\nexport class EditProduct implements Action {\n    readonly type = EDIT_PRODUCTS;\n    constructor(public payload: Products) { }\n}\nexport class EditProductSuccess implements Action {\n    readonly type = EDIT_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\n\nexport type ProductActionNames =\n    AddProduct |\n    GetProducts |\n    DeleteProduct |\n    EditProduct |\n    LoadDataSuccess |\n    AddProductSuccess |\n    EditProductSuccess |\n    DeleteProductSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "GET_PRODUCTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadDataSuccess",
            "id": "class-LoadDataSuccess-8f821070acc51cb49e845044c331b634",
            "file": "src/app/store/products/products.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { Products } from 'src/app/shared/models/products';\n\n\nexport const GET_PRODUCTS = '[PRODUCTS] GET';\nexport const ADD_PRODUCTS = '[PRODUCTS] ADD';\nexport const ADD_PRODUCTS_SUCCESS = '[PRODUCTS] ADD PRODUCTS SUCCESS';\nexport const DELETE_PRODUCT = '[PRODUCTS] DELETE';\nexport const DELETE_PRODUCTS_SUCCESS = '[PRODUCTS] DELETE PRODUCTS SUCCESS';\nexport const EDIT_PRODUCTS = '[PRODUCTS] EDIT';\nexport const EDIT_PRODUCTS_SUCCESS = '[PRODUCTS] EDIT PRODUCTS SUCCESS';\nexport const DATA_LOAD = '[PRODUCTS] LOAD';\n\n\nexport class GetProducts implements Action {\n    readonly type = GET_PRODUCTS;\n    constructor() { }\n}\nexport class LoadDataSuccess implements Action {\n    readonly type = DATA_LOAD;\n    constructor(public payload: Products[]) { }\n}\nexport class AddProduct implements Action {\n    readonly type = ADD_PRODUCTS;\n    constructor(public payload: Products) {\n    }\n}\nexport class AddProductSuccess implements Action {\n    readonly type = ADD_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\nexport class DeleteProduct implements Action {\n    readonly type = DELETE_PRODUCT;\n    constructor(public payload: number) { }\n}\nexport class DeleteProductSuccess implements Action {\n    readonly type = DELETE_PRODUCTS_SUCCESS;\n}\nexport class EditProduct implements Action {\n    readonly type = EDIT_PRODUCTS;\n    constructor(public payload: Products) { }\n}\nexport class EditProductSuccess implements Action {\n    readonly type = EDIT_PRODUCTS_SUCCESS;\n    constructor(public payload: Products) { }\n}\n\nexport type ProductActionNames =\n    AddProduct |\n    GetProducts |\n    DeleteProduct |\n    EditProduct |\n    LoadDataSuccess |\n    AddProductSuccess |\n    EditProductSuccess |\n    DeleteProductSuccess;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Products[]"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Products[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Products[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DATA_LOAD",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogIn",
            "id": "class-LogIn-37df83de30f6f1b5b793adbcdfc76ea0",
            "file": "src/app/store/user-access/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { User } from 'src/app/shared/models/User';\nexport enum AuthActionTypes {\n    LOGIN = '[AUTH] LogIn',\n    SIGNUP = '[AUTH] SignUp',\n    LOGOUT = '[AUTH] LogOut',\n    LOGIN_SUCCESS = '[Auth] Login Success',\n    LOGIN_FAIL = '[Auth] Login FAIL',\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\n}\nexport class LogIn implements Action {\n    readonly type = AuthActionTypes.LOGIN;\n    constructor(public payload: User) {\n    }\n}\nexport class LogInSuccess implements Action {\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\n    constructor(public payload: any) { }\n}\nexport class LogInFail implements Action {\n    readonly type = AuthActionTypes.LOGIN_FAIL;\n    constructor(public payload: any) { }\n}\nexport class SignUp implements Action {\n    readonly type = AuthActionTypes.SIGNUP;\n    constructor(public payload: User) { }\n}\nexport class SignUpSuccess implements Action {\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n    constructor(public payload: User) { }\n}\nexport class SignUpFailure implements Action {\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\n}\nexport class Logout implements Action {\n    readonly type = AuthActionTypes.LOGOUT;\n}\nexport type AuthAction = LogIn\n    | LogInSuccess\n    | SignUp\n    | SignUpSuccess\n    | SignUpFailure\n    | LogInFail\n    | Logout;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInFail",
            "id": "class-LogInFail-37df83de30f6f1b5b793adbcdfc76ea0",
            "file": "src/app/store/user-access/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { User } from 'src/app/shared/models/User';\nexport enum AuthActionTypes {\n    LOGIN = '[AUTH] LogIn',\n    SIGNUP = '[AUTH] SignUp',\n    LOGOUT = '[AUTH] LogOut',\n    LOGIN_SUCCESS = '[Auth] Login Success',\n    LOGIN_FAIL = '[Auth] Login FAIL',\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\n}\nexport class LogIn implements Action {\n    readonly type = AuthActionTypes.LOGIN;\n    constructor(public payload: User) {\n    }\n}\nexport class LogInSuccess implements Action {\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\n    constructor(public payload: any) { }\n}\nexport class LogInFail implements Action {\n    readonly type = AuthActionTypes.LOGIN_FAIL;\n    constructor(public payload: any) { }\n}\nexport class SignUp implements Action {\n    readonly type = AuthActionTypes.SIGNUP;\n    constructor(public payload: User) { }\n}\nexport class SignUpSuccess implements Action {\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n    constructor(public payload: User) { }\n}\nexport class SignUpFailure implements Action {\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\n}\nexport class Logout implements Action {\n    readonly type = AuthActionTypes.LOGOUT;\n}\nexport type AuthAction = LogIn\n    | LogInSuccess\n    | SignUp\n    | SignUpSuccess\n    | SignUpFailure\n    | LogInFail\n    | Logout;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInSuccess",
            "id": "class-LogInSuccess-37df83de30f6f1b5b793adbcdfc76ea0",
            "file": "src/app/store/user-access/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { User } from 'src/app/shared/models/User';\nexport enum AuthActionTypes {\n    LOGIN = '[AUTH] LogIn',\n    SIGNUP = '[AUTH] SignUp',\n    LOGOUT = '[AUTH] LogOut',\n    LOGIN_SUCCESS = '[Auth] Login Success',\n    LOGIN_FAIL = '[Auth] Login FAIL',\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\n}\nexport class LogIn implements Action {\n    readonly type = AuthActionTypes.LOGIN;\n    constructor(public payload: User) {\n    }\n}\nexport class LogInSuccess implements Action {\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\n    constructor(public payload: any) { }\n}\nexport class LogInFail implements Action {\n    readonly type = AuthActionTypes.LOGIN_FAIL;\n    constructor(public payload: any) { }\n}\nexport class SignUp implements Action {\n    readonly type = AuthActionTypes.SIGNUP;\n    constructor(public payload: User) { }\n}\nexport class SignUpSuccess implements Action {\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n    constructor(public payload: User) { }\n}\nexport class SignUpFailure implements Action {\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\n}\nexport class Logout implements Action {\n    readonly type = AuthActionTypes.LOGOUT;\n}\nexport type AuthAction = LogIn\n    | LogInSuccess\n    | SignUp\n    | SignUpSuccess\n    | SignUpFailure\n    | LogInFail\n    | Logout;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Logout",
            "id": "class-Logout-37df83de30f6f1b5b793adbcdfc76ea0",
            "file": "src/app/store/user-access/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { User } from 'src/app/shared/models/User';\nexport enum AuthActionTypes {\n    LOGIN = '[AUTH] LogIn',\n    SIGNUP = '[AUTH] SignUp',\n    LOGOUT = '[AUTH] LogOut',\n    LOGIN_SUCCESS = '[Auth] Login Success',\n    LOGIN_FAIL = '[Auth] Login FAIL',\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\n}\nexport class LogIn implements Action {\n    readonly type = AuthActionTypes.LOGIN;\n    constructor(public payload: User) {\n    }\n}\nexport class LogInSuccess implements Action {\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\n    constructor(public payload: any) { }\n}\nexport class LogInFail implements Action {\n    readonly type = AuthActionTypes.LOGIN_FAIL;\n    constructor(public payload: any) { }\n}\nexport class SignUp implements Action {\n    readonly type = AuthActionTypes.SIGNUP;\n    constructor(public payload: User) { }\n}\nexport class SignUpSuccess implements Action {\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n    constructor(public payload: User) { }\n}\nexport class SignUpFailure implements Action {\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\n}\nexport class Logout implements Action {\n    readonly type = AuthActionTypes.LOGOUT;\n}\nexport type AuthAction = LogIn\n    | LogInSuccess\n    | SignUp\n    | SignUpSuccess\n    | SignUpFailure\n    | LogInFail\n    | Logout;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUp",
            "id": "class-SignUp-37df83de30f6f1b5b793adbcdfc76ea0",
            "file": "src/app/store/user-access/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { User } from 'src/app/shared/models/User';\nexport enum AuthActionTypes {\n    LOGIN = '[AUTH] LogIn',\n    SIGNUP = '[AUTH] SignUp',\n    LOGOUT = '[AUTH] LogOut',\n    LOGIN_SUCCESS = '[Auth] Login Success',\n    LOGIN_FAIL = '[Auth] Login FAIL',\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\n}\nexport class LogIn implements Action {\n    readonly type = AuthActionTypes.LOGIN;\n    constructor(public payload: User) {\n    }\n}\nexport class LogInSuccess implements Action {\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\n    constructor(public payload: any) { }\n}\nexport class LogInFail implements Action {\n    readonly type = AuthActionTypes.LOGIN_FAIL;\n    constructor(public payload: any) { }\n}\nexport class SignUp implements Action {\n    readonly type = AuthActionTypes.SIGNUP;\n    constructor(public payload: User) { }\n}\nexport class SignUpSuccess implements Action {\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n    constructor(public payload: User) { }\n}\nexport class SignUpFailure implements Action {\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\n}\nexport class Logout implements Action {\n    readonly type = AuthActionTypes.LOGOUT;\n}\nexport type AuthAction = LogIn\n    | LogInSuccess\n    | SignUp\n    | SignUpSuccess\n    | SignUpFailure\n    | LogInFail\n    | Logout;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpFailure",
            "id": "class-SignUpFailure-37df83de30f6f1b5b793adbcdfc76ea0",
            "file": "src/app/store/user-access/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { User } from 'src/app/shared/models/User';\nexport enum AuthActionTypes {\n    LOGIN = '[AUTH] LogIn',\n    SIGNUP = '[AUTH] SignUp',\n    LOGOUT = '[AUTH] LogOut',\n    LOGIN_SUCCESS = '[Auth] Login Success',\n    LOGIN_FAIL = '[Auth] Login FAIL',\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\n}\nexport class LogIn implements Action {\n    readonly type = AuthActionTypes.LOGIN;\n    constructor(public payload: User) {\n    }\n}\nexport class LogInSuccess implements Action {\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\n    constructor(public payload: any) { }\n}\nexport class LogInFail implements Action {\n    readonly type = AuthActionTypes.LOGIN_FAIL;\n    constructor(public payload: any) { }\n}\nexport class SignUp implements Action {\n    readonly type = AuthActionTypes.SIGNUP;\n    constructor(public payload: User) { }\n}\nexport class SignUpSuccess implements Action {\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n    constructor(public payload: User) { }\n}\nexport class SignUpFailure implements Action {\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\n}\nexport class Logout implements Action {\n    readonly type = AuthActionTypes.LOGOUT;\n}\nexport type AuthAction = LogIn\n    | LogInSuccess\n    | SignUp\n    | SignUpSuccess\n    | SignUpFailure\n    | LogInFail\n    | Logout;\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpSuccess",
            "id": "class-SignUpSuccess-37df83de30f6f1b5b793adbcdfc76ea0",
            "file": "src/app/store/user-access/user.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\nimport { User } from 'src/app/shared/models/User';\nexport enum AuthActionTypes {\n    LOGIN = '[AUTH] LogIn',\n    SIGNUP = '[AUTH] SignUp',\n    LOGOUT = '[AUTH] LogOut',\n    LOGIN_SUCCESS = '[Auth] Login Success',\n    LOGIN_FAIL = '[Auth] Login FAIL',\n    SIGNUP_SUCCESS = '[Auth] SignUp Success',\n    SIGNUP_FAILURE = '[Auth] SignUp Failure'\n}\nexport class LogIn implements Action {\n    readonly type = AuthActionTypes.LOGIN;\n    constructor(public payload: User) {\n    }\n}\nexport class LogInSuccess implements Action {\n    readonly type = AuthActionTypes.LOGIN_SUCCESS;\n    constructor(public payload: any) { }\n}\nexport class LogInFail implements Action {\n    readonly type = AuthActionTypes.LOGIN_FAIL;\n    constructor(public payload: any) { }\n}\nexport class SignUp implements Action {\n    readonly type = AuthActionTypes.SIGNUP;\n    constructor(public payload: User) { }\n}\nexport class SignUpSuccess implements Action {\n    readonly type = AuthActionTypes.SIGNUP_SUCCESS;\n    constructor(public payload: User) { }\n}\nexport class SignUpFailure implements Action {\n    readonly type = AuthActionTypes.SIGNUP_FAILURE;\n}\nexport class Logout implements Action {\n    readonly type = AuthActionTypes.LOGOUT;\n}\nexport type AuthAction = LogIn\n    | LogInSuccess\n    | SignUp\n    | SignUpSuccess\n    | SignUpFailure\n    | LogInFail\n    | Logout;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddProductComponent",
            "id": "component-AddProductComponent-9057abf3d52aa8020ed668784353456d",
            "file": "src/app/product/add-product/add-product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-product",
            "styleUrls": [
                "./add-product.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-product.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addProductForm",
                    "defaultValue": "new FormGroup({\n    productName: new FormControl(),\n    description: new FormControl(),\n    category: new FormControl(),\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "categories",
                    "defaultValue": "['Laptops', 'Cell Phones', 'Audio', 'TV', 'Samrt Devices']",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "getState",
                    "defaultValue": "this.store.select(productState)",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isDarkTheme",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "product",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "productId",
                    "defaultValue": "null",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "addProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "changedTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gotolisting",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ProductsService } from 'src/app/services/products.service';\nimport { Products } from 'src/app/shared/models/products';\nimport { AppState, productState } from 'src/app/store/app.state';\nimport { EditProduct, GetProducts, AddProduct } from 'src/app/store/products/products.actions';\n\n@Component({\n  selector: 'app-add-product',\n  templateUrl: './add-product.component.html',\n  styleUrls: ['./add-product.component.scss']\n})\nexport class AddProductComponent implements OnInit {\n  categories: string[] = ['Laptops', 'Cell Phones', 'Audio', 'TV', 'Samrt Devices'];\n  addProductForm = new FormGroup({\n    productName: new FormControl(),\n    description: new FormControl(),\n    category: new FormControl(),\n  });\n  getState: Observable<any> = this.store.select(productState);\n  product: { id?: number; productName: string; description: string; category: string; };\n  productId: number = null;\n  isDarkTheme = false;\n\n  constructor(\n    private router: Router,\n    private store: Store<AppState>,\n    private productsService: ProductsService,\n    private route: ActivatedRoute,\n  ) { }\n\n  ngOnInit(): void {\n    if (this.route.snapshot.params && this.route.snapshot.params.id) {\n      this.productId = this.route.snapshot.params.id;\n      this.productsService.getProduct(this.productId).subscribe((data: Products) => {\n        if (data) {\n          this.addProductForm = new FormGroup({\n            productName: new FormControl(data.productName, Validators.required),\n            description: new FormControl(data.description),\n            category: new FormControl(data.category, Validators.required),\n          });\n        }\n      });\n    } else {\n      this.addProductForm = new FormGroup({\n        productName: new FormControl('', Validators.required),\n        description: new FormControl(''),\n        category: new FormControl('', Validators.required),\n      });\n    }\n  }\n\n  get productForm(): any {\n    return this.addProductForm.controls;\n  }\n\n  gotolisting(): void {\n    this.router.navigate(['/']);\n  }\n\n  addProduct(): void {\n    if (this.productId) {\n      this.product = {\n        productName: this.addProductForm.get('productName').value,\n        description: this.addProductForm.get('description').value,\n        category: this.addProductForm.get('category').value,\n        id: this.productId,\n      };\n      this.store.dispatch(new EditProduct(this.product));\n      this.store.dispatch(new GetProducts());\n      this.router.navigate(['/']);\n    } else {\n      this.product = {\n        productName: this.addProductForm.get('productName').value,\n        description: this.addProductForm.get('description').value,\n        category: this.addProductForm.get('category').value,\n      };\n      this.store.dispatch(new AddProduct(this.product));\n      this.store.dispatch(new GetProducts());\n      this.router.navigate(['/']);\n    }\n  }\n\n  changedTheme(theme): void {\n    this.isDarkTheme = theme;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  input[type=text], select, textarea {\r\n    width: 100%;\r\n    padding: 12px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    resize: vertical;\r\n  }\r\n  \r\n  label {\r\n    padding: 12px 12px 12px 0;\r\n    display: inline-block;\r\n  }\r\n  \r\n  .button {\r\n    background-color: #1976d2;\r\n    color: white;\r\n    padding: 12px 20px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    float: right;\r\n    width: 7%;\r\n  }\r\n  \r\n  .button:hover {\r\n    background-color: #1976d2;\r\n  }\r\n  \r\n  .disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  textarea {\r\n    height:100px\r\n  }\r\n\r\n  .container {\r\n    border-radius: 5px;\r\n    background-color: #ffffff;\r\n    padding: 20px;\r\n  }\r\n  \r\n  .container-header {\r\n    border-radius: 5px;\r\n    background-color: #ffffff;\r\n    padding: 10px 20px 48px 20px;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .col-20 {\r\n    float: left;\r\n    width: 10%;\r\n    margin-top: 6px;\r\n  }\r\n  \r\n  .col-80 {\r\n    float: left;\r\n    width: 90%;\r\n    margin-top: 6px;\r\n  }\r\n  .description {\r\n      margin-bottom: 10px;\r\n  }\r\n  \r\n  /* Clear floats after the columns */\r\n  .row:after {\r\n    content: \"\";\r\n    display: table;\r\n    clear: both;\r\n  }\r\n\r\n  input[type=text]:focus {\r\n    background-color: #e6e6ff;\r\n  }\r\n  \r\n  .alert-danger {\r\n      color: #ff0000;\r\n  }\r\n\r\n  .add-product {\r\n    width: 93%;\r\n    float: left;\r\n    margin-top: 10px;\r\n  }\r\n\r\n  /* Responsive layout - when the screen is less than 600px wide, make the two columns stack on top of each other instead of next to each other */\r\n  @media screen and (max-width: 600px) {\r\n    .col-25, .col-75, input[type=submit] {\r\n      width: 100%;\r\n      margin-top: 0;\r\n    }\r\n  }\r\n  @import \"../../theme.variable.scss\";\r\n",
                    "styleUrl": "./add-product.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "productForm": {
                    "name": "productForm",
                    "getSignature": {
                        "name": "productForm",
                        "type": "any",
                        "returnType": "any",
                        "line": 56
                    }
                }
            },
            "templateData": "<app-header [displayLoginUser]=\"true\" (changedTheme)='changedTheme($event)'></app-header>\n<div class=\"container-header\" [ngClass]=\"isDarkTheme ? 'dark-theme' : 'light-theme'\">\n    <div>\n        <h4 class=\"add-product\">Add Product</h4>\n        <button class=\"button\" aria-label=\"Go to listing\" (click)=\"gotolisting()\">\n            Back\n        </button>\n    </div>\n</div>\n<div class=\"container\" [ngClass]=\"isDarkTheme ? 'dark-theme' : 'light-theme'\">\n    <form [formGroup]=\"addProductForm\" (ngSubmit)=\"addProduct()\">\n        <div class=\"row\">\n            <div class=\"col-20\">\n                <label for=\"product-name\">Product Name</label>\n            </div>\n            <div class=\"col-80\">\n                <input type=\"text\" id=\"product-name\" formControlName=\"productName\" placeholder=\"Enter product name..\"\n                    required>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-20\">\n                <label for=\"description\">Description</label>\n            </div>\n            <div class=\"col-80\">\n                <textarea id=\"description\" formControlName=\"description\" placeholder=\"Write some description..\"\n                    required></textarea>\n            </div>\n        </div>\n        <div class=\"row description\">\n            <div class=\"col-20\">\n                <label for=\"category\">Category</label>\n            </div>\n            <div class=\"col-80\">\n                <select formControlName=\"category\" id=\"category\">\n                    <option disabled>Select Option</option>\n                    <option>Choose Option</option>\n                    <option *ngFor=\"let category of categories\">{{category}}</option>\n                </select>\n            </div>\n        </div>\n        <div class=\"alert-danger\">\n            <div *ngIf=\"!addProductForm.valid\">All fields are required</div>\n        </div>\n        <div class=\"row\">\n            <button class=\"button\" [ngClass]=\"!addProductForm.valid ? 'disabled' : 'enabled' \" type=\"submit\" [disabled]=\"!addProductForm.valid\">Submit</button>\n        </div>\n    </form>\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-fe47212bbe6e65e1a33147ac30c99ee3",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Trending electric products'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Trending electric products';\n\n  constructor() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\r\n    font-size: 14px;\r\n    color: #333;\r\n    box-sizing: border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n\r\n  h1,\r\n  h2,\r\n  h3,\r\n  h5,\r\n  h6 {\r\n    margin: 8px 0;\r\n  }\r\n\r\n  p {\r\n    margin: 0;\r\n  }\r\n\r\n  .spacer {\r\n    flex: 1;\r\n  }\r\n\r\n  a,\r\n  a:visited,\r\n  a:hover {\r\n    color: #f5f5f5;\r\n    text-decoration: none;\r\n  }\r\n\r\n  a:hover {\r\n    color: #c3002f;\r\n  }\r\n\r\n  a {\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n  }\r\n\r\n  .toolbar {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    height: 60px;\r\n    display: flex;\r\n    align-items: center;\r\n    background-color: #1976d2;\r\n    color: white;\r\n    font-weight: 600;\r\n  }\r\n\r\n  .toolbar img {\r\n    margin: 0 16px;\r\n  }\r\n\r\n  .content {\r\n    // display: flex;\r\n    margin: 86px 0px 0px;\r\n    padding: 10px 0px;\r\n    width: 100%;\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n  footer {\r\n    margin-top: 8px;\r\n    display: flex;\r\n    align-items: center;\r\n    line-height: 20px;\r\n  }\r\n\r\n  footer a {\r\n    display: flex;\r\n    align-items: center;\r\n  }",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "templateData": "<div class=\"content\" role=\"main\">\n  <router-outlet></router-outlet>\n  <!-- Footer -->\n  <footer>\n  </footer>\n</div>"
        },
        {
            "name": "ElectronicsListingComponent",
            "id": "component-ElectronicsListingComponent-3cc39c894508e788e8c85e5ee19bacc2",
            "file": "src/app/product/electronics-listing/electronics-listing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-electronics-listing",
            "styleUrls": [
                "./electronics-listing.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./electronics-listing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getState",
                    "defaultValue": "this.store.select(state => state.product)",
                    "type": "Observable<Products[]>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isDarkTheme",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isUserAuthenticated",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "nodatamsg",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "prducts",
                    "type": "Products[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "searchString",
                    "defaultValue": "null",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "addProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "changedTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editAction",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { Products } from 'src/app/shared/models/products';\nimport { AppState } from 'src/app/store/app.state';\nimport { GetProducts, DeleteProduct } from 'src/app/store/products/products.actions';\n\n@Component({\n  selector: 'app-electronics-listing',\n  templateUrl: './electronics-listing.component.html',\n  styleUrls: ['./electronics-listing.component.scss']\n})\nexport class ElectronicsListingComponent implements OnInit {\n  prducts: Products[];\n  searchString: string = null;\n  getState: Observable<Products[]> = this.store.select(state => state.product);\n  isUserAuthenticated = false;\n  nodatamsg = true;\n  isDarkTheme = false;\n  \n  constructor(\n    private store: Store<AppState>,\n    private router: Router) {\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(new GetProducts());\n    this.store.subscribe((data: any) => {\n      this.prducts = data.product.products;\n      if (this.prducts.length > 0) {\n        this.nodatamsg = false;\n      } else {\n        this.nodatamsg = true;\n      }\n    });\n    if (localStorage.getItem('isUserLoggedIn') === 'true') {\n      this.isUserAuthenticated = true;\n    } else {\n      this.router.navigate(['/']);\n    }\n  }\n\n  addProduct(): void {\n    this.router.navigate(['/add']);\n  }\n\n  deleteProduct(id: number): void {\n    const confirmation = window.confirm(\n      'Are you sure you want to delete this product?'\n    );\n    if (confirmation) {\n      this.store.dispatch(new DeleteProduct(id));\n      this.store.dispatch(new GetProducts());\n    }\n  }\n\n  editAction(id): void {\n    this.router.navigateByUrl('edit/' + id);\n  }\n \n  changedTheme(theme): void {\n    this.isDarkTheme = theme;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".electronic-listing {\r\n    background-color: #ffffff;\r\n    border: 1px solid #e0dfdf;\r\n    border-radius: 10px;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    .section-one {\r\n        height: 20px;\r\n        h4 {\r\n            width: 10%;\r\n            float: left;\r\n            margin: 0;\r\n        }\r\n    }\r\n    .heading-four {\r\n        width: 80%;\r\n        float: left;\r\n        margin: 0;\r\n    }\r\n    table {\r\n        margin-top: 42px;\r\n        thead {\r\n            tr {\r\n                background: #e6e6ff;\r\n                .action-col {\r\n                    min-width: 7rem;\r\n                }\r\n            }\r\n        }\r\n        tbody {\r\n            tr {\r\n                td {\r\n                    border-bottom: 1px solid #e6e6ff;\r\n                }\r\n                .actions-buttons {\r\n                    padding: 0.5rem;\r\n                    text-align: center;\r\n                    .button { \r\n                        padding: 5px 5px;\r\n                    }\r\n                    .delete-button {\r\n                        background: #a72f2f;\r\n                        margin-left: 0.5rem;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    .button {\r\n        background-color: #1976d2;\r\n        color: white;\r\n        padding: 10px 10px;\r\n        border: none;\r\n        border-radius: 4px;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .add-btn {\r\n        float: right;\r\n    }\r\n    \r\n    .button:hover {\r\n        background-color: #1976d2;\r\n    }\r\n    .no-data {\r\n        width: 100%;\r\n        display: inline-block;\r\n    }\r\n}\r\n@import \"../../theme.variable.scss\";\r\n",
                    "styleUrl": "./electronics-listing.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-header [displayLoginUser]=\"true\" (changedTheme)='changedTheme($event)'></app-header>\n<div class=\"electronic-listing\" [ngClass]=\"isDarkTheme ? 'dark-theme' : 'light-theme'\">\n    <div class=\"section-one\">\n        <h4>Top Categories - </h4>\n        <span>Cell Phones | TV | Samrt Devices | Audio | Laptops </span>\n    </div>\n</div>\n<div class=\"electronic-listing\" [ngClass]=\"isDarkTheme ? 'dark-theme' : 'light-theme'\">\n    <div>\n        <h4 class=\"heading-four\">Electronic Products</h4>\n        <button *ngIf=\"isUserAuthenticated\" class=\"button add-btn\" aria-label=\"Add new product\" (click)=\"addProduct()\">\n            Add Product\n        </button>\n    </div>\n  \n    <table>\n        <thead>\n            <tr>\n                <th>Product</th>\n                <th>Description</th>\n                <th>Electronic Category</th>\n                <th *ngIf=\"isUserAuthenticated\" class=\"action-col\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let product of prducts\">\n                <td tabindex=\"0\">{{ product.productName }}</td>\n                <td tabindex=\"0\">{{ product.description }}</td>\n                <td tabindex=\"0\">{{ product.category }}</td>\n                <td *ngIf=\"isUserAuthenticated\" class=\"actions-buttons\">\n                    <button tabindex=\"0\" class=\"button\" aria-label=\"Edit Product\"\n                        (click)=\"editAction(product.id)\">\n                        Edit\n                    </button>\n                    <button tabindex=\"0\" class=\"button delete-button\" aria-label=\"Delete Product\" (click)=\"deleteProduct(product.id)\">\n                        Delete\n                    </button>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <div class=\"no-data\" *ngIf=\"nodatamsg\">No Data Available</div>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-14a453d5b30fb3c4a04f7aa570899827",
            "file": "src/app/shared/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "displayLoginUser",
                    "line": 10,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "changedTheme",
                    "defaultValue": "new EventEmitter()",
                    "line": 11,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "action",
                    "defaultValue": "'Login'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isUserAuthenticated",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "themeChecked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "username",
                    "defaultValue": "null",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "changeStatus",
                    "args": [
                        {
                            "name": "isDarkTheme",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "isDarkTheme",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n  // @Input() isUserAuthenticated: boolean;\n  @Input() displayLoginUser?: boolean;\n  @Output() changedTheme: EventEmitter<any> = new EventEmitter();\n  isUserAuthenticated = false;\n  username: string = null;\n  action = 'Login';\n  themeChecked = false;\n  constructor() { }\n\n  ngOnInit(): void {\n    if (localStorage.getItem('themeChecked') === 'true') {\n      this.themeChecked = true;\n    } else {\n      this.themeChecked = false;\n    }\n    this.changeStatus(this.themeChecked);\n    if (localStorage.getItem('isUserLoggedIn') === 'true') {\n      this.isUserAuthenticated = true;\n      this.action = 'Logout';\n      if (JSON.parse(localStorage.getItem('user')).username && this.displayLoginUser) {\n        this.username = JSON.parse(localStorage.getItem('user')).username;\n      }\n    } else {\n      this.action = 'Login';\n    }\n  }\n\n  clearStorage(): void {\n    if (localStorage.getItem('isUserLoggedIn')) {\n      localStorage.removeItem('isUserLoggedIn');\n    }\n    if (localStorage.getItem('user')) {\n      localStorage.removeItem('user');\n    }\n  }\n\n  changeStatus(isDarkTheme): void {\n    localStorage.setItem('themeChecked', isDarkTheme);\n    this.changedTheme.emit(isDarkTheme);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/app/app.component.scss\";\r\n\r\n.switch {\r\n    position: relative;\r\n    display: inline-block;\r\n    width: 60px;\r\n    height: 25px;\r\n    margin-right: 10px;\r\n  }\r\n  \r\n  .switch input { \r\n    opacity: 0;\r\n    width: 0;\r\n    height: 0;\r\n  }\r\n  \r\n  .slider {\r\n    position: absolute;\r\n    cursor: pointer;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: #ccc;\r\n    -webkit-transition: .4s;\r\n    transition: .4s;\r\n  }\r\n  \r\n  .slider:before {\r\n    position: absolute;\r\n    content: \"\";\r\n    height: 17px;\r\n    width: 26px;\r\n    left: 4px;\r\n    bottom: 4px;\r\n    background-color: white;\r\n    -webkit-transition: .4s;\r\n    transition: .4s;\r\n  }\r\n  \r\n  input:checked + .slider {\r\n    background-color: #00082d;\r\n  }\r\n  \r\n  input:focus + .slider {\r\n    box-shadow: 0 0 1px #2196F3;\r\n  }\r\n  \r\n  input:checked + .slider:before {\r\n    -webkit-transform: translateX(26px);\r\n    -ms-transform: translateX(26px);\r\n    transform: translateX(26px);\r\n  }",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"toolbar\" role=\"banner\">\n  <img width=\"100\" alt=\"Trending Objects\" src=\"assets/logo.png\" />\n  <a tabindex=\"1\" [routerLink]=\"['/']\">\n    Ubay\n  </a>\n  <div class=\"spacer\"></div>\n  <div>\n    <span *ngIf=\"isUserAuthenticated && username\">Welcome {{username}}</span>\n    <a tabindex=\"2\" [routerLink]=\"['/login']\" (click)=\"clearStorage()\">\n      {{action}}\n    </a>\n    <a tabindex=\"3\" *ngIf=\"!isUserAuthenticated\" [routerLink]=\"['/register']\" (click)=\"clearStorage()\">\n      Sign Up\n    </a>\n    <label class=\"switch\">\n      <input type=\"checkbox\" [checked]=\"themeChecked\" (change)=\"changeStatus($event.target.checked)\">\n      <span class=\"slider\"></span>\n    </label>\n  </div>\n</div>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-9577963024e6c5492240ea1b7436cef5",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayLoginUser",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "getState",
                    "defaultValue": "this.store.select(accesState)",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "invalid",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isDarkTheme",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loginForm",
                    "defaultValue": "new FormGroup({\n    username: new FormControl('', Validators.required),\n    password: new FormControl('', Validators.required),\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "changedTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { AppState, accesState } from '../store/app.state';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { LogIn } from '../store/user-access/user.actions';\nimport { User } from '../shared/models/User';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  user: User;\n  getState: Observable<any> = this.store.select(accesState);\n  errorMessage: string;\n  displayLoginUser = false;\n  invalid;\n  isDarkTheme = false;\n  loginForm = new FormGroup({\n    username: new FormControl('', Validators.required),\n    password: new FormControl('', Validators.required),\n  });\n  constructor(private store: Store<AppState>) { }\n  ngOnInit(): void {\n  }\n\n  login(): void {\n    const user = {\n      username: this.loginForm.get('username').value,\n      password: this.loginForm.get('password').value\n    };\n    this.store.dispatch(new LogIn(user));\n    this.store.subscribe(data => {\n      const d: any = data;\n      if (!d.auth.user) {\n        this.invalid = true;\n      } else {\n        this.invalid = false;\n      }\n    });\n  }\n\n  changedTheme(theme): void {\n    this.isDarkTheme = theme;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  /* style the container */\r\n  .container {\r\n    position: relative;\r\n    border-radius: 5px;\r\n    background-color: #ffffff;\r\n    padding: 20px 0 30px 0;\r\n    width: 40%;\r\n    margin: auto;\r\n  } \r\n\r\n  .login {\r\n      width: 100% !important;\r\n      input {\r\n        border: 1px solid #8cb8e2 !important;\r\n      }\r\n  }\r\n\r\n  h2 {\r\n    text-align: center;\r\n  }\r\n\r\n  .login-btn {\r\n    width: 100%;\r\n    height: 49px;\r\n    background: green;\r\n    border: 1px solid green;\r\n    color: white;\r\n    font-size: 16px;\r\n  }\r\n\r\n  \r\n  /* style inputs and link buttons */\r\n  input,\r\n  .btn {\r\n    width: 100%;\r\n    color:white;\r\n    padding: 12px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    margin: 5px 0;\r\n    opacity: 0.85;\r\n    display: inline-block;\r\n    font-size: 17px;\r\n    line-height: 20px;\r\n    text-decoration: none; /* remove underline from anchors */\r\n  }\r\n  \r\n  input:hover,\r\n  .btn:hover {\r\n    opacity: 1;\r\n  }\r\n  \r\n  /* style the submit button */\r\n  input[type=submit] {\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  input[type=submit]:hover {\r\n    background-color: #45a049;\r\n  }\r\n  \r\n  /* Two-column layout */\r\n  .col {\r\n    float: left;\r\n    width: 50%;\r\n    margin: auto;\r\n    padding: 0 50px;\r\n    margin-top: 6px;\r\n  }\r\n  \r\n  /* Clear floats after the columns */\r\n  .row:after {\r\n    content: \"\";\r\n    display: table;\r\n    clear: both;\r\n  }\r\n  \r\n  /* vertical line */\r\n  .vl {\r\n    position: absolute;\r\n    left: 50%;\r\n    transform: translate(-50%);\r\n    border: 2px solid #ddd;\r\n    height: 175px;\r\n  }\r\n  \r\n  /* text inside the vertical line */\r\n  .vl-innertext {\r\n    position: absolute;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: #f1f1f1;\r\n    border: 1px solid #ccc;\r\n    border-radius: 50%;\r\n    padding: 8px 10px;\r\n  }\r\n  \r\n  /* hide some text on medium and large screens */\r\n  .hide-md-lg {\r\n    display: none;\r\n  }\r\n  \r\n  /* bottom container */\r\n  .bottom-container {\r\n    text-align: center;\r\n    background-color: #1976d2;\r\n    border-radius: 0px 0px 4px 4px;\r\n    width: 40%;\r\n    margin: auto;\r\n  }\r\n\r\n  .forget-btn {\r\n      a {\r\n          opacity: 0.5;\r\n          cursor: not-allowed;\r\n      }\r\n  }\r\n\r\n  .error {\r\n    color: red;\r\n  }\r\n  \r\n  /* Responsive layout - when the screen is less than 650px wide, make the two columns stack on top of each other instead of next to each other */\r\n  @media screen and (max-width: 650px) {\r\n    .col {\r\n      width: 100%;\r\n      margin-top: 0;\r\n    }\r\n    /* hide the vertical line */\r\n    .vl {\r\n      display: none;\r\n    }\r\n    /* show the hidden text on small screens */\r\n    .hide-md-lg {\r\n      display: block;\r\n      text-align: center;\r\n    }\r\n  }\r\n  @import \"../theme.variable.scss\";\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-header [displayLoginUser]=\"displayLoginUser\" (changedTheme)='changedTheme($event)'></app-header>\n<div class=\"container\" [ngClass]=\"isDarkTheme ? 'dark-theme' : 'light-theme'\">\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n        <div class=\"row\">\n            <h2>Login</h2>\n            <div class=\"col login\">\n                <input tabindex=\"4\" type=\"email\" formControlName=\"username\" placeholder=\"Username\" required>\n                \n                <input tabindex=\"5\" type=\"password\" formControlName=\"password\" placeholder=\"Password\" required>\n                \n                <label *ngIf=\"invalid\" [ngClass] = \"'error'\"> Please Enter Valid Email/Password </label>\n                <button class=\"login-btn\" tabindex=\"6\" type=\"submit\">Login</button>\n            </div>\n        </div>\n    </form>\n</div>\n\n<div class=\"bottom-container\">\n    <div class=\"row\">\n        <div tabindex=\"7\" class=\"col\">\n            <a href=\"/\" class=\"btn\">Cancel</a>\n        </div>\n        <div tabindex=\"8\"  class=\"col\">\n            <a [routerLink]=\"['/register']\" class=\"btn\">Sign up</a>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-00475276f17c399a6cdbf3d113d6552d",
            "file": "src/app/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "email",
                    "line": 22,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayLoginUser",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "getState",
                    "defaultValue": "this.store.select(accesState)",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isDarkTheme",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "registerForm",
                    "defaultValue": "new FormGroup({\n    name: new FormControl('', Validators.required),\n    username: new FormControl('', Validators.required),\n    password: new FormControl('', Validators.required),\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "changedTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { User } from '../shared/models/User';\nimport { SignUp } from '../store/user-access/user.actions';\nimport { Observable } from 'rxjs';\nimport { accesState, AppState } from '../store/app.state';\nimport { Store } from '@ngrx/store';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  user: User;\n  getState: Observable<any> = this.store.select(accesState);\n  displayLoginUser = false;\n  errorMessage: string;\n  isDarkTheme = false;\n\n  @Input() email: string;\n  registerForm = new FormGroup({\n    name: new FormControl('', Validators.required),\n    username: new FormControl('', Validators.required),\n    password: new FormControl('', Validators.required),\n  });\n  constructor(private store: Store<AppState>) { }\n  ngOnInit(): void {\n  }\n\n  register(): void {\n    if (this.registerForm.invalid) {\n      return;\n    }\n    const user = {\n      name: this.registerForm.get('name').value,\n      username: this.registerForm.get('username').value,\n      password: this.registerForm.get('password').value\n    };\n    this.store.dispatch(new SignUp(user));\n  }\n\n  changedTheme(theme): void {\n    this.isDarkTheme = theme;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/app/login/login.component.scss\";\r\n\r\n",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-header [displayLoginUser]=\"displayLoginUser\" (changedTheme)='changedTheme($event)'></app-header>\n<div class=\"container\" [ngClass]=\"isDarkTheme ? 'dark-theme' : 'light-theme'\">\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\">\n        <div class=\"row\">\n            <h2>Sign Up</h2>\n            <div class=\"col login\">\n                <input tabindex=\"3\" type=\"text\" formControlName=\"name\" placeholder=\"Enter Name..\" required>\n                <input tabindex=\"4\" type=\"email\" [email]=\"true\" formControlName=\"username\" placeholder=\"Enter Username..\" required>\n                <input tabindex=\"5\" type=\"password\" formControlName=\"password\" placeholder=\"Enter Password..\" required>\n                <div *ngIf=\"registerForm.invalid && registerForm.touched && registerForm.dirty\" [ngClass]=\"'error'\">\n                    Please Enter Valid Inputs\n                </div>\n                <button class=\"login-btn\" tabindex=\"6\" type=\"submit\">Register</button>\n            </div>\n        </div>\n    </form>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddProductComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ElectronicsListingComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "accesState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.state.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('access')"
            },
            {
                "name": "ADD_PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/products/products.actions.ts",
                "type": "string",
                "defaultValue": "'[PRODUCTS] ADD'"
            },
            {
                "name": "ADD_PRODUCTS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/products/products.actions.ts",
                "type": "string",
                "defaultValue": "'[PRODUCTS] ADD PRODUCTS SUCCESS'"
            },
            {
                "name": "App",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/app.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DATA_LOAD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/products/products.actions.ts",
                "type": "string",
                "defaultValue": "'[PRODUCTS] LOAD'"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/add-product.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/electronics-listing.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/login.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/register.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DELETE_PRODUCT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/products/products.actions.ts",
                "type": "string",
                "defaultValue": "'[PRODUCTS] DELETE'"
            },
            {
                "name": "DELETE_PRODUCTS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/products/products.actions.ts",
                "type": "string",
                "defaultValue": "'[PRODUCTS] DELETE PRODUCTS SUCCESS'"
            },
            {
                "name": "EDIT_PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/products/products.actions.ts",
                "type": "string",
                "defaultValue": "'[PRODUCTS] EDIT'"
            },
            {
                "name": "EDIT_PRODUCTS_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/products/products.actions.ts",
                "type": "string",
                "defaultValue": "'[PRODUCTS] EDIT PRODUCTS SUCCESS'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "GET_PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/products/products.actions.ts",
                "type": "string",
                "defaultValue": "'[PRODUCTS] GET'"
            },
            {
                "name": "HTTPPORT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared-constants.ts",
                "type": "string",
                "defaultValue": "'http://localhost:3000/'"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/user-access/auth.reducers.ts",
                "type": "State",
                "defaultValue": "{\n  user: null,\n}"
            },
            {
                "name": "initialStateValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/products/prodcuts.reducer.ts",
                "type": "State",
                "defaultValue": "{\n  products: [],\n}"
            },
            {
                "name": "PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared-constants.ts",
                "type": "string",
                "defaultValue": "'products'"
            },
            {
                "name": "productState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.state.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('product')"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.state.ts",
                "type": "object",
                "defaultValue": "{\n    auth: access.reducer,\n    product: product.reducer\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/add-product.stories.ts",
                "type": "Story<AddProductComponent>",
                "defaultValue": "(args: AddProductComponent) => ({\r\n    component: AddProductComponent,\r\n    moduleMetadata: {\r\n        imports: [\r\n            RouterTestingModule,\r\n            HttpClientTestingModule,\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n        ],\r\n        schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n        declarations: [AddProductComponent],\r\n        providers: [provideMockStore({})],\r\n    },\r\n    props: { ...args },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/app.stories.ts",
                "type": "Story<AppComponent>",
                "defaultValue": "(args: AppComponent) => ({\r\n    component: AppComponent,\r\n    templateUrl: '../app/app.component.html',\r\n    styleUrls: ['../app/app.component.scss'],\r\n    moduleMetadata: {\r\n        declarations: [\r\n            AppComponent,\r\n        ],\r\n        imports: [\r\n            BrowserModule,\r\n            AppRoutingModule,\r\n            ReactiveFormsModule,\r\n            FormsModule,\r\n            HttpClientModule,\r\n            StoreModule.forRoot(reducers, {}),\r\n            EffectsModule.forRoot([ProductsEffects, AccessEffects]),\r\n        ],\r\n        providers: [{ provide: APP_BASE_HREF, useValue: '/' }],\r\n        schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n    },\r\n    props: { args },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/electronics-listing.stories.ts",
                "type": "Story<ElectronicsListingComponent>",
                "defaultValue": "(args: ElectronicsListingComponent) => ({\r\n    component: ElectronicsListingComponent,\r\n    moduleMetadata: {\r\n        imports: [\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n            RouterTestingModule,\r\n        ],\r\n        schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n        declarations: [ElectronicsListingComponent],\r\n        providers: [provideMockStore({})],\r\n    },\r\n    props: { ...args },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/header.stories.ts",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\r\n    component: HeaderComponent,\r\n    moduleMetadata: {\r\n        imports: [\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n            RouterTestingModule,\r\n        ],\r\n        declarations: [HeaderComponent],\r\n        providers: [],\r\n    },\r\n    props: { ...args },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/login.stories.ts",
                "type": "Story<LoginComponent>",
                "defaultValue": "(args: LoginComponent) => ({\r\n    component: LoginComponent,\r\n    moduleMetadata: {\r\n        imports: [\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n            RouterTestingModule,\r\n        ],\r\n        schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n        declarations: [LoginComponent],\r\n        providers: [provideMockStore({})],\r\n    },\r\n    props: { ...args },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/register.stories.ts",
                "type": "Story<RegisterComponent>",
                "defaultValue": "(args: RegisterComponent) => ({\r\n    component: RegisterComponent,\r\n    moduleMetadata: {\r\n        imports: [\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n            RouterTestingModule,\r\n        ],\r\n        schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n        declarations: [RegisterComponent],\r\n        providers: [provideMockStore({})],\r\n    },\r\n    props: { ...args },\r\n})"
            }
        ],
        "functions": [
            {
                "name": "reducer",
                "file": "src/app/store/user-access/auth.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/store/products/prodcuts.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AuthAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LogIn | LogInSuccess | SignUp | SignUpSuccess | SignUpFailure | LogInFail | Logout",
                "file": "src/app/store/user-access/user.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ProductActionNames",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "AddProduct | GetProducts | DeleteProduct | EditProduct | LoadDataSuccess | AddProductSuccess | EditProductSuccess | DeleteProductSuccess",
                "file": "src/app/store/products/products.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "LOGIN",
                        "value": "[AUTH] LogIn"
                    },
                    {
                        "name": "SIGNUP",
                        "value": "[AUTH] SignUp"
                    },
                    {
                        "name": "LOGOUT",
                        "value": "[AUTH] LogOut"
                    },
                    {
                        "name": "LOGIN_SUCCESS",
                        "value": "[Auth] Login Success"
                    },
                    {
                        "name": "LOGIN_FAIL",
                        "value": "[Auth] Login FAIL"
                    },
                    {
                        "name": "SIGNUP_SUCCESS",
                        "value": "[Auth] SignUp Success"
                    },
                    {
                        "name": "SIGNUP_FAILURE",
                        "value": "[Auth] SignUp Failure"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/user-access/user.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/store/app.state.ts": [
                {
                    "name": "accesState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.state.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('access')"
                },
                {
                    "name": "productState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.state.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('product')"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.state.ts",
                    "type": "object",
                    "defaultValue": "{\n    auth: access.reducer,\n    product: product.reducer\n}"
                }
            ],
            "src/app/store/products/products.actions.ts": [
                {
                    "name": "ADD_PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/products/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'[PRODUCTS] ADD'"
                },
                {
                    "name": "ADD_PRODUCTS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/products/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'[PRODUCTS] ADD PRODUCTS SUCCESS'"
                },
                {
                    "name": "DATA_LOAD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/products/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'[PRODUCTS] LOAD'"
                },
                {
                    "name": "DELETE_PRODUCT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/products/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'[PRODUCTS] DELETE'"
                },
                {
                    "name": "DELETE_PRODUCTS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/products/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'[PRODUCTS] DELETE PRODUCTS SUCCESS'"
                },
                {
                    "name": "EDIT_PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/products/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'[PRODUCTS] EDIT'"
                },
                {
                    "name": "EDIT_PRODUCTS_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/products/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'[PRODUCTS] EDIT PRODUCTS SUCCESS'"
                },
                {
                    "name": "GET_PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/products/products.actions.ts",
                    "type": "string",
                    "defaultValue": "'[PRODUCTS] GET'"
                }
            ],
            "src/stories/app.stories.ts": [
                {
                    "name": "App",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/app.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/app.stories.ts",
                    "type": "Story<AppComponent>",
                    "defaultValue": "(args: AppComponent) => ({\r\n    component: AppComponent,\r\n    templateUrl: '../app/app.component.html',\r\n    styleUrls: ['../app/app.component.scss'],\r\n    moduleMetadata: {\r\n        declarations: [\r\n            AppComponent,\r\n        ],\r\n        imports: [\r\n            BrowserModule,\r\n            AppRoutingModule,\r\n            ReactiveFormsModule,\r\n            FormsModule,\r\n            HttpClientModule,\r\n            StoreModule.forRoot(reducers, {}),\r\n            EffectsModule.forRoot([ProductsEffects, AccessEffects]),\r\n        ],\r\n        providers: [{ provide: APP_BASE_HREF, useValue: '/' }],\r\n        schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n    },\r\n    props: { args },\r\n})"
                }
            ],
            "src/stories/add-product.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/add-product.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/add-product.stories.ts",
                    "type": "Story<AddProductComponent>",
                    "defaultValue": "(args: AddProductComponent) => ({\r\n    component: AddProductComponent,\r\n    moduleMetadata: {\r\n        imports: [\r\n            RouterTestingModule,\r\n            HttpClientTestingModule,\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n        ],\r\n        schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n        declarations: [AddProductComponent],\r\n        providers: [provideMockStore({})],\r\n    },\r\n    props: { ...args },\r\n})"
                }
            ],
            "src/stories/electronics-listing.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/electronics-listing.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/electronics-listing.stories.ts",
                    "type": "Story<ElectronicsListingComponent>",
                    "defaultValue": "(args: ElectronicsListingComponent) => ({\r\n    component: ElectronicsListingComponent,\r\n    moduleMetadata: {\r\n        imports: [\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n            RouterTestingModule,\r\n        ],\r\n        schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n        declarations: [ElectronicsListingComponent],\r\n        providers: [provideMockStore({})],\r\n    },\r\n    props: { ...args },\r\n})"
                }
            ],
            "src/stories/header.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/header.stories.ts",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\r\n    component: HeaderComponent,\r\n    moduleMetadata: {\r\n        imports: [\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n            RouterTestingModule,\r\n        ],\r\n        declarations: [HeaderComponent],\r\n        providers: [],\r\n    },\r\n    props: { ...args },\r\n})"
                }
            ],
            "src/stories/login.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/login.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/login.stories.ts",
                    "type": "Story<LoginComponent>",
                    "defaultValue": "(args: LoginComponent) => ({\r\n    component: LoginComponent,\r\n    moduleMetadata: {\r\n        imports: [\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n            RouterTestingModule,\r\n        ],\r\n        schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n        declarations: [LoginComponent],\r\n        providers: [provideMockStore({})],\r\n    },\r\n    props: { ...args },\r\n})"
                }
            ],
            "src/stories/register.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/register.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/register.stories.ts",
                    "type": "Story<RegisterComponent>",
                    "defaultValue": "(args: RegisterComponent) => ({\r\n    component: RegisterComponent,\r\n    moduleMetadata: {\r\n        imports: [\r\n            FormsModule,\r\n            ReactiveFormsModule,\r\n            RouterTestingModule,\r\n        ],\r\n        schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n        declarations: [RegisterComponent],\r\n        providers: [provideMockStore({})],\r\n    },\r\n    props: { ...args },\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/shared/shared-constants.ts": [
                {
                    "name": "HTTPPORT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared-constants.ts",
                    "type": "string",
                    "defaultValue": "'http://localhost:3000/'"
                },
                {
                    "name": "PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared-constants.ts",
                    "type": "string",
                    "defaultValue": "'products'"
                }
            ],
            "src/app/store/user-access/auth.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/user-access/auth.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\n  user: null,\n}"
                }
            ],
            "src/app/store/products/prodcuts.reducer.ts": [
                {
                    "name": "initialStateValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/products/prodcuts.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\n  products: [],\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/user-access/auth.reducers.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/user-access/auth.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/products/prodcuts.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/products/prodcuts.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/user-access/user.actions.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "value": "[AUTH] LogIn"
                        },
                        {
                            "name": "SIGNUP",
                            "value": "[AUTH] SignUp"
                        },
                        {
                            "name": "LOGOUT",
                            "value": "[AUTH] LogOut"
                        },
                        {
                            "name": "LOGIN_SUCCESS",
                            "value": "[Auth] Login Success"
                        },
                        {
                            "name": "LOGIN_FAIL",
                            "value": "[Auth] Login FAIL"
                        },
                        {
                            "name": "SIGNUP_SUCCESS",
                            "value": "[Auth] SignUp Success"
                        },
                        {
                            "name": "SIGNUP_FAILURE",
                            "value": "[Auth] SignUp Failure"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/user-access/user.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/user-access/user.actions.ts": [
                {
                    "name": "AuthAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LogIn | LogInSuccess | SignUp | SignUpSuccess | SignUpFailure | LogInFail | Logout",
                    "file": "src/app/store/user-access/user.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/store/products/products.actions.ts": [
                {
                    "name": "ProductActionNames",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "AddProduct | GetProducts | DeleteProduct | EditProduct | LoadDataSuccess | AddProductSuccess | EditProductSuccess | DeleteProductSuccess",
                    "file": "src/app/store/products/products.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "add",
                        "component": "AddProductComponent"
                    },
                    {
                        "path": "edit/:id",
                        "component": "AddProductComponent"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "register",
                        "component": "RegisterComponent"
                    },
                    {
                        "path": "",
                        "component": "ElectronicsListingComponent"
                    },
                    {
                        "path": "**",
                        "redirectTo": "/"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/product/add-product/add-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/product/electronics-listing/electronics-listing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ElectronicsListingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/services/products.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/user-access.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserAccessService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/products.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Products",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HTTPPORT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared-constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accesState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/prodcuts.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/prodcuts.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/prodcuts.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialStateValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/product.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductsState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddProduct",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteProduct",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EditProduct",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EditProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetProducts",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadDataSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_PRODUCTS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATA_LOAD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_PRODUCT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_PRODUCTS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EDIT_PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EDIT_PRODUCTS_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/products/products.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user-access/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AccessEffects",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user-access/auth.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user-access/auth.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user-access/auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user-access/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user-access/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user-access/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user-access/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Logout",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user-access/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user-access/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/user-access/user.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/add-product.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/add-product.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/app.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "App",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/app.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/electronics-listing.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/electronics-listing.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/register.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/register.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}